from flask import Flask, jsonify, request, render_template
import psycopg2
from psycopg2 import OperationalError

app = Flask(__name__)

# Database connection details
DB_CONFIG = {
    "dbname": "postgres",
    "user": "postgres",
    "host": "10.98.11.151",
    "password": "postgres",
    "port": "5432"
}

@app.route("/")
def health_check():
    return "Hi! Visit /db-status to check the database connection status or /query to run SQL queries."

@app.route('/db-status', methods=['GET'])
def db_status():
    try:
        # Attempt to connect to the database
        connection = psycopg2.connect(**DB_CONFIG)
        connection.close()
        return jsonify({"status": "success", "message": "Connected to the database successfully!"})
    except OperationalError as e:
        return jsonify({"status": "failure", "message": str(e)}), 500

@app.route('/query', methods=['GET', 'POST'])
def query_ui():
    if request.method == 'POST':
        query = request.form.get('query', 'SELECT * FROM tep_acct')
        try:
            connection = psycopg2.connect(**DB_CONFIG)
            cursor = connection.cursor()
            cursor.execute(query)
            
            # Fetch column names
            columns = [desc[0] for desc in cursor.description]
            
            # Fetch all rows
            rows = cursor.fetchall()
            
            cursor.close()
            connection.close()
            
            return render_template('query.html', 
                                  query=query, 
                                  columns=columns, 
                                  rows=rows, 
                                  success=True)
        except Exception as e:
            return render_template('query.html', 
                                  query=query, 
                                  error=str(e), 
                                  success=False)
    else:
        # Default query for GET request
        return render_template('query.html', 
                              query='SELECT * FROM tep_acct', 
                              success=None)

# Create a templates folder and put this HTML file there
@app.route('/templates/query.html')
def get_template():
    return """
<!DOCTYPE html>
<html>
<head>
    <title>SQL Query Tool</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 1000px; margin: 0 auto; }
        .query-form { margin-bottom: 20px; }
        textarea { width: 100%; height: 100px; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        .error { color: red; }
        .success { color: green; }
    </style>
</head>
<body>
    <div class="container">
        <h1>SQL Query Tool</h1>
        <form method="post" class="query-form">
            <label for="query">Enter SQL Query:</label><br>
            <textarea name="query" id="query">{{ query }}</textarea><br><br>
            <input type="submit" value="Execute Query">
        </form>
        
        {% if success == True %}
            <p class="success">Query executed successfully</p>
            <h2>Results:</h2>
            <table>
                <thead>
                    <tr>
                        {% for column in columns %}
                            <th>{{ column }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody>
                    {% for row in rows %}
                        <tr>
                            {% for cell in row %}
                                <td>{{ cell }}</td>
                            {% endfor %}
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% elif success == False %}
            <p class="error">Error: {{ error }}</p>
        {% endif %}
    </div>
</body>
</html>
"""

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)üòç




from flask import Flask, request, jsonify, render_template_string
import psycopg2
from psycopg2 import OperationalError

app = Flask(__name__)

# Database configuration
DB_CONFIG = {
    "dbname": "postgres",
    "user": "postgres",
    "password": "postgres",
    "host": "10.98.15.251",
    "port": "5432"
}

# Basic UI Template
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>PostgreSQL Query Executor</title>
</head>
<body>
    <h2>Enter SQL Query:</h2>
    <form method="POST" action="/run-query">
        <textarea name="query" rows="5" cols="50">SELECT * FROM tep_acct;</textarea><br>
        <input type="submit" value="Run Query">
    </form>
    <h3>Result:</h3>
    <pre>{{ result }}</pre>
</body>
</html>
"""

@app.route("/")
def home():
    return "Hi! Visit /db-status to check the database connection status, or /query-ui to run SQL queries."

@app.route("/db-status", methods=['GET'])
def db_status():
    """Check if the database connection is working."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.close()
        return jsonify({"status": "success", "message": "Connected to the database successfully!"})
    except OperationalError as e:
        return jsonify({"status": "failure", "message": str(e)}), 500

@app.route("/query-ui", methods=['GET'])
def query_ui():
    """Render the UI for running SQL queries."""
    return render_template_string(HTML_TEMPLATE, result="")

@app.route("/run-query", methods=['POST'])
def run_query():
    """Execute SQL query and return results."""
    query = request.form.get("query")
    if not query:
        return render_template_string(HTML_TEMPLATE, result="Error: Query is empty!")

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        cur.execute(query)
        rows = cur.fetchall()
        colnames = [desc[0] for desc in cur.description]  # Column names
        cur.close()
        conn.close()

        # Format result
        result = "\n".join(["\t".join(map(str, row)) for row in [colnames] + rows])
        return render_template_string(HTML_TEMPLATE, result=result)

    except Exception as e:
        return render_template_string(HTML_TEMPLATE, result=f"Error: {str(e)}")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)